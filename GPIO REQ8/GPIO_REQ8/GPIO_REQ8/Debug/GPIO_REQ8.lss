
GPIO_REQ8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011e8  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000893  00000000  00000000  0000188c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000090a  00000000  00000000  0000211f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000188  00000000  00000000  00002a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053d  00000000  00000000  00002bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cc2  00000000  00000000  000030f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00003db3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4a 01 	call	0x294	; 0x294 <main>
  64:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <gpioPinDirection>:
			PORTC_DIR^=1<<u8_pins;
			break;
		}
		case GPIOD:
		{
			PORTD_DIR^=1<<u8_pins;
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	a1 f0       	breq	.+40     	; 0x98 <gpioPinDirection+0x2c>
  70:	28 f0       	brcs	.+10     	; 0x7c <gpioPinDirection+0x10>
  72:	82 30       	cpi	r24, 0x02	; 2
  74:	f9 f0       	breq	.+62     	; 0xb4 <gpioPinDirection+0x48>
  76:	83 30       	cpi	r24, 0x03	; 3
  78:	59 f1       	breq	.+86     	; 0xd0 <gpioPinDirection+0x64>
  7a:	08 95       	ret
  7c:	44 23       	and	r20, r20
  7e:	19 f0       	breq	.+6      	; 0x86 <gpioPinDirection+0x1a>
  80:	4f 3f       	cpi	r20, 0xFF	; 255
  82:	31 f0       	breq	.+12     	; 0x90 <gpioPinDirection+0x24>
  84:	08 95       	ret
  86:	8a b3       	in	r24, 0x1a	; 26
  88:	60 95       	com	r22
  8a:	68 23       	and	r22, r24
  8c:	6a bb       	out	0x1a, r22	; 26
  8e:	08 95       	ret
  90:	8a b3       	in	r24, 0x1a	; 26
  92:	68 2b       	or	r22, r24
  94:	6a bb       	out	0x1a, r22	; 26
  96:	08 95       	ret
  98:	44 23       	and	r20, r20
  9a:	19 f0       	breq	.+6      	; 0xa2 <gpioPinDirection+0x36>
  9c:	4f 3f       	cpi	r20, 0xFF	; 255
  9e:	31 f0       	breq	.+12     	; 0xac <gpioPinDirection+0x40>
  a0:	08 95       	ret
  a2:	87 b3       	in	r24, 0x17	; 23
  a4:	60 95       	com	r22
  a6:	68 23       	and	r22, r24
  a8:	67 bb       	out	0x17, r22	; 23
  aa:	08 95       	ret
  ac:	87 b3       	in	r24, 0x17	; 23
  ae:	68 2b       	or	r22, r24
  b0:	67 bb       	out	0x17, r22	; 23
  b2:	08 95       	ret
  b4:	44 23       	and	r20, r20
  b6:	19 f0       	breq	.+6      	; 0xbe <gpioPinDirection+0x52>
  b8:	4f 3f       	cpi	r20, 0xFF	; 255
  ba:	31 f0       	breq	.+12     	; 0xc8 <gpioPinDirection+0x5c>
  bc:	08 95       	ret
  be:	84 b3       	in	r24, 0x14	; 20
  c0:	60 95       	com	r22
  c2:	68 23       	and	r22, r24
  c4:	64 bb       	out	0x14, r22	; 20
  c6:	08 95       	ret
  c8:	84 b3       	in	r24, 0x14	; 20
  ca:	68 2b       	or	r22, r24
  cc:	64 bb       	out	0x14, r22	; 20
  ce:	08 95       	ret
  d0:	44 23       	and	r20, r20
  d2:	19 f0       	breq	.+6      	; 0xda <gpioPinDirection+0x6e>
  d4:	4f 3f       	cpi	r20, 0xFF	; 255
  d6:	31 f0       	breq	.+12     	; 0xe4 <gpioPinDirection+0x78>
  d8:	08 95       	ret
  da:	81 b3       	in	r24, 0x11	; 17
  dc:	60 95       	com	r22
  de:	68 23       	and	r22, r24
  e0:	61 bb       	out	0x11, r22	; 17
  e2:	08 95       	ret
  e4:	81 b3       	in	r24, 0x11	; 17
  e6:	68 2b       	or	r22, r24
  e8:	61 bb       	out	0x11, r22	; 17
  ea:	08 95       	ret

000000ec <gpioPinWrite>:
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	a1 f0       	breq	.+40     	; 0x118 <gpioPinWrite+0x2c>
  f0:	28 f0       	brcs	.+10     	; 0xfc <gpioPinWrite+0x10>
  f2:	82 30       	cpi	r24, 0x02	; 2
  f4:	f9 f0       	breq	.+62     	; 0x134 <gpioPinWrite+0x48>
  f6:	83 30       	cpi	r24, 0x03	; 3
  f8:	59 f1       	breq	.+86     	; 0x150 <gpioPinWrite+0x64>
  fa:	08 95       	ret
  fc:	44 23       	and	r20, r20
  fe:	19 f0       	breq	.+6      	; 0x106 <gpioPinWrite+0x1a>
 100:	4f 3f       	cpi	r20, 0xFF	; 255
 102:	31 f0       	breq	.+12     	; 0x110 <gpioPinWrite+0x24>
 104:	08 95       	ret
 106:	8b b3       	in	r24, 0x1b	; 27
 108:	60 95       	com	r22
 10a:	68 23       	and	r22, r24
 10c:	6b bb       	out	0x1b, r22	; 27
 10e:	08 95       	ret
 110:	8b b3       	in	r24, 0x1b	; 27
 112:	68 2b       	or	r22, r24
 114:	6b bb       	out	0x1b, r22	; 27
 116:	08 95       	ret
 118:	44 23       	and	r20, r20
 11a:	19 f0       	breq	.+6      	; 0x122 <gpioPinWrite+0x36>
 11c:	4f 3f       	cpi	r20, 0xFF	; 255
 11e:	31 f0       	breq	.+12     	; 0x12c <gpioPinWrite+0x40>
 120:	08 95       	ret
 122:	88 b3       	in	r24, 0x18	; 24
 124:	60 95       	com	r22
 126:	68 23       	and	r22, r24
 128:	68 bb       	out	0x18, r22	; 24
 12a:	08 95       	ret
 12c:	88 b3       	in	r24, 0x18	; 24
 12e:	68 2b       	or	r22, r24
 130:	68 bb       	out	0x18, r22	; 24
 132:	08 95       	ret
 134:	44 23       	and	r20, r20
 136:	19 f0       	breq	.+6      	; 0x13e <gpioPinWrite+0x52>
 138:	4f 3f       	cpi	r20, 0xFF	; 255
 13a:	31 f0       	breq	.+12     	; 0x148 <gpioPinWrite+0x5c>
 13c:	08 95       	ret
 13e:	85 b3       	in	r24, 0x15	; 21
 140:	60 95       	com	r22
 142:	68 23       	and	r22, r24
 144:	65 bb       	out	0x15, r22	; 21
 146:	08 95       	ret
 148:	85 b3       	in	r24, 0x15	; 21
 14a:	68 2b       	or	r22, r24
 14c:	65 bb       	out	0x15, r22	; 21
 14e:	08 95       	ret
 150:	44 23       	and	r20, r20
 152:	19 f0       	breq	.+6      	; 0x15a <gpioPinWrite+0x6e>
 154:	4f 3f       	cpi	r20, 0xFF	; 255
 156:	31 f0       	breq	.+12     	; 0x164 <gpioPinWrite+0x78>
 158:	08 95       	ret
 15a:	82 b3       	in	r24, 0x12	; 18
 15c:	60 95       	com	r22
 15e:	68 23       	and	r22, r24
 160:	62 bb       	out	0x12, r22	; 18
 162:	08 95       	ret
 164:	82 b3       	in	r24, 0x12	; 18
 166:	68 2b       	or	r22, r24
 168:	62 bb       	out	0x12, r22	; 18
 16a:	08 95       	ret

0000016c <gpioPinRead>:
}

uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t u8_pin_value=0;
	switch(u8_port)
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	79 f0       	breq	.+30     	; 0x18e <gpioPinRead+0x22>
 170:	28 f0       	brcs	.+10     	; 0x17c <gpioPinRead+0x10>
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	a9 f0       	breq	.+42     	; 0x1a0 <gpioPinRead+0x34>
 176:	83 30       	cpi	r24, 0x03	; 3
 178:	e1 f0       	breq	.+56     	; 0x1b2 <gpioPinRead+0x46>
 17a:	24 c0       	rjmp	.+72     	; 0x1c4 <gpioPinRead+0x58>
	{
		case GPIOA:
		{
			u8_pin_value=((PORTA_DIR>>u8_pin)&1);
 17c:	8a b3       	in	r24, 0x1a	; 26
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 c0       	rjmp	.+4      	; 0x186 <gpioPinRead+0x1a>
 182:	95 95       	asr	r25
 184:	87 95       	ror	r24
 186:	6a 95       	dec	r22
 188:	e2 f7       	brpl	.-8      	; 0x182 <gpioPinRead+0x16>
 18a:	81 70       	andi	r24, 0x01	; 1
			break;
 18c:	1c c0       	rjmp	.+56     	; 0x1c6 <gpioPinRead+0x5a>
		}
		
		case GPIOB:
		{
			u8_pin_value=((PORTB_DIR>>u8_pin)&1);
 18e:	87 b3       	in	r24, 0x17	; 23
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <gpioPinRead+0x2c>
 194:	95 95       	asr	r25
 196:	87 95       	ror	r24
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <gpioPinRead+0x28>
 19c:	81 70       	andi	r24, 0x01	; 1
			break;
 19e:	13 c0       	rjmp	.+38     	; 0x1c6 <gpioPinRead+0x5a>
		}
		case GPIOC:
		{
			u8_pin_value=((PORTC_DIR>>u8_pin)&1);
 1a0:	84 b3       	in	r24, 0x14	; 20
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <gpioPinRead+0x3e>
 1a6:	95 95       	asr	r25
 1a8:	87 95       	ror	r24
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <gpioPinRead+0x3a>
 1ae:	81 70       	andi	r24, 0x01	; 1
			break;
 1b0:	0a c0       	rjmp	.+20     	; 0x1c6 <gpioPinRead+0x5a>
		}
		case GPIOD:
		{
			u8_pin_value=((PORTD_DIR>>u8_pin)&1);
 1b2:	81 b3       	in	r24, 0x11	; 17
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <gpioPinRead+0x50>
 1b8:	95 95       	asr	r25
 1ba:	87 95       	ror	r24
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <gpioPinRead+0x4c>
 1c0:	81 70       	andi	r24, 0x01	; 1
			break;
 1c2:	01 c0       	rjmp	.+2      	; 0x1c6 <gpioPinRead+0x5a>
	}
}

uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t u8_pin_value=0;
 1c4:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		u8_pin_value=LOW;
	}
	return u8_pin_value;
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	09 f0       	breq	.+2      	; 0x1ce <gpioPinRead+0x62>
 1cc:	90 e0       	ldi	r25, 0x00	; 0
}
 1ce:	89 2f       	mov	r24, r25
 1d0:	81 95       	neg	r24
 1d2:	08 95       	ret

000001d4 <Led_Init>:

#include "led.h"
#include "gpio.h"
void Led_Init(En_LedNumber_t en_led_id)
{
	switch (en_led_id)
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	61 f0       	breq	.+24     	; 0x1f0 <Led_Init+0x1c>
 1d8:	28 f0       	brcs	.+10     	; 0x1e4 <Led_Init+0x10>
 1da:	82 30       	cpi	r24, 0x02	; 2
 1dc:	79 f0       	breq	.+30     	; 0x1fc <Led_Init+0x28>
 1de:	83 30       	cpi	r24, 0x03	; 3
 1e0:	99 f0       	breq	.+38     	; 0x208 <Led_Init+0x34>
 1e2:	08 95       	ret
	{
		case LED_0:
		{
			gpioPinDirection(LED_0_GPIO, LED_0_BIT, OUTPUT);
 1e4:	4f ef       	ldi	r20, 0xFF	; 255
 1e6:	60 e1       	ldi	r22, 0x10	; 16
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 36 00 	call	0x6c	; 0x6c <gpioPinDirection>
			break;
 1ee:	08 95       	ret
		}
		case LED_1:
		{
			gpioPinDirection(LED_1_GPIO, LED_1_BIT, OUTPUT);
 1f0:	4f ef       	ldi	r20, 0xFF	; 255
 1f2:	60 e2       	ldi	r22, 0x20	; 32
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 36 00 	call	0x6c	; 0x6c <gpioPinDirection>
			break;
 1fa:	08 95       	ret
		}
		case LED_2:
		{
			gpioPinDirection(LED_2_GPIO, LED_2_BIT, OUTPUT);
 1fc:	4f ef       	ldi	r20, 0xFF	; 255
 1fe:	60 e4       	ldi	r22, 0x40	; 64
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	0e 94 36 00 	call	0x6c	; 0x6c <gpioPinDirection>
			break;
 206:	08 95       	ret
		}
		case LED_3:
		{
			gpioPinDirection(LED_3_GPIO, LED_3_BIT, OUTPUT);
 208:	4f ef       	ldi	r20, 0xFF	; 255
 20a:	60 e8       	ldi	r22, 0x80	; 128
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	0e 94 36 00 	call	0x6c	; 0x6c <gpioPinDirection>
 212:	08 95       	ret

00000214 <Led_On>:
	}
}

void Led_On(En_LedNumber_t en_led_id)
{
	switch (en_led_id)
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	61 f0       	breq	.+24     	; 0x230 <Led_On+0x1c>
 218:	28 f0       	brcs	.+10     	; 0x224 <Led_On+0x10>
 21a:	82 30       	cpi	r24, 0x02	; 2
 21c:	79 f0       	breq	.+30     	; 0x23c <Led_On+0x28>
 21e:	83 30       	cpi	r24, 0x03	; 3
 220:	99 f0       	breq	.+38     	; 0x248 <Led_On+0x34>
 222:	08 95       	ret
	{
		case LED_0:
		{
			 gpioPinWrite(LED_0_GPIO,LED_0_BIT, HIGH);
 224:	4f ef       	ldi	r20, 0xFF	; 255
 226:	60 e1       	ldi	r22, 0x10	; 16
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
			break;
 22e:	08 95       	ret
		}
		case LED_1:
		{
			 gpioPinWrite(LED_1_GPIO,LED_1_BIT, HIGH);
 230:	4f ef       	ldi	r20, 0xFF	; 255
 232:	60 e2       	ldi	r22, 0x20	; 32
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
			break;
 23a:	08 95       	ret
		}
		case LED_2:
		{
			 gpioPinWrite(LED_2_GPIO,LED_2_BIT, HIGH);
 23c:	4f ef       	ldi	r20, 0xFF	; 255
 23e:	60 e4       	ldi	r22, 0x40	; 64
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
			break;
 246:	08 95       	ret
		}
		case LED_3:
		{
			 gpioPinWrite(LED_3_GPIO,LED_3_BIT,HIGH);
 248:	4f ef       	ldi	r20, 0xFF	; 255
 24a:	60 e8       	ldi	r22, 0x80	; 128
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
 252:	08 95       	ret

00000254 <Led_Off>:
	}
}

void Led_Off(En_LedNumber_t en_led_id)
{
	switch (en_led_id)
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	61 f0       	breq	.+24     	; 0x270 <Led_Off+0x1c>
 258:	28 f0       	brcs	.+10     	; 0x264 <Led_Off+0x10>
 25a:	82 30       	cpi	r24, 0x02	; 2
 25c:	79 f0       	breq	.+30     	; 0x27c <Led_Off+0x28>
 25e:	83 30       	cpi	r24, 0x03	; 3
 260:	99 f0       	breq	.+38     	; 0x288 <Led_Off+0x34>
 262:	08 95       	ret
	{
		case LED_0:
		{
			gpioPinWrite(LED_0_GPIO,LED_0_BIT, LOW);
 264:	40 e0       	ldi	r20, 0x00	; 0
 266:	60 e1       	ldi	r22, 0x10	; 16
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
			break;
 26e:	08 95       	ret
		}
		case LED_1:
		{
			gpioPinWrite(LED_1_GPIO,LED_1_BIT, LOW);
 270:	40 e0       	ldi	r20, 0x00	; 0
 272:	60 e2       	ldi	r22, 0x20	; 32
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
			break;
 27a:	08 95       	ret
		}
		case LED_2:
		{
			gpioPinWrite(LED_2_GPIO,LED_2_BIT, LOW);
 27c:	40 e0       	ldi	r20, 0x00	; 0
 27e:	60 e4       	ldi	r22, 0x40	; 64
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
			break;
 286:	08 95       	ret
		}
		case LED_3:
		{
			gpioPinWrite(LED_3_GPIO,LED_3_BIT,LOW);
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	60 e8       	ldi	r22, 0x80	; 128
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
 292:	08 95       	ret

00000294 <main>:
	uint8_t buttonStatus=0;
	uint8_t count =0;
	uint16_t i = 0;
	
    /* Replace with your application code */
	pushButtonInit(BTN_0);
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	0e 94 6e 01 	call	0x2dc	; 0x2dc <pushButtonInit>
	Led_Init(LED_0);
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Led_Init>

int main(void)
{
	
	uint8_t buttonStatus=0;
	uint8_t count =0;
 2a0:	c0 e0       	ldi	r28, 0x00	; 0
		buttonStatus=pushButtonGetStatus(BTN_0);
		if (pushButtonGetStatus(BTN_0)==Pressed)
		{
			count++;
			Led_On(LED_0);
			SwDelay_ms((1000*count));
 2a2:	08 ee       	ldi	r16, 0xE8	; 232
 2a4:	13 e0       	ldi	r17, 0x03	; 3
    /* Replace with your application code */
	pushButtonInit(BTN_0);
	Led_Init(LED_0);
    while (1) 
    {
		buttonStatus=pushButtonGetStatus(BTN_0);
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	0e 94 8e 01 	call	0x31c	; 0x31c <pushButtonGetStatus>
		if (pushButtonGetStatus(BTN_0)==Pressed)
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	0e 94 8e 01 	call	0x31c	; 0x31c <pushButtonGetStatus>
 2b2:	82 30       	cpi	r24, 0x02	; 2
 2b4:	c1 f7       	brne	.-16     	; 0x2a6 <main+0x12>
		{
			count++;
 2b6:	cf 5f       	subi	r28, 0xFF	; 255
			Led_On(LED_0);
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	0e 94 0a 01 	call	0x214	; 0x214 <Led_On>
			SwDelay_ms((1000*count));
 2be:	c0 9f       	mul	r28, r16
 2c0:	b0 01       	movw	r22, r0
 2c2:	c1 9f       	mul	r28, r17
 2c4:	70 0d       	add	r23, r0
 2c6:	11 24       	eor	r1, r1
 2c8:	07 2e       	mov	r0, r23
 2ca:	00 0c       	add	r0, r0
 2cc:	88 0b       	sbc	r24, r24
 2ce:	99 0b       	sbc	r25, r25
 2d0:	0e 94 36 02 	call	0x46c	; 0x46c <SwDelay_ms>
			Led_Off(LED_0);
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	0e 94 2a 01 	call	0x254	; 0x254 <Led_Off>
 2da:	e5 cf       	rjmp	.-54     	; 0x2a6 <main+0x12>

000002dc <pushButtonInit>:
 */ 

#include "pushButton.h"
void pushButtonInit(En_buttonId_t en_butotn_id)
{
	switch (en_butotn_id)
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	61 f0       	breq	.+24     	; 0x2f8 <pushButtonInit+0x1c>
 2e0:	28 f0       	brcs	.+10     	; 0x2ec <pushButtonInit+0x10>
 2e2:	82 30       	cpi	r24, 0x02	; 2
 2e4:	79 f0       	breq	.+30     	; 0x304 <pushButtonInit+0x28>
 2e6:	83 30       	cpi	r24, 0x03	; 3
 2e8:	99 f0       	breq	.+38     	; 0x310 <pushButtonInit+0x34>
 2ea:	08 95       	ret
	{
		case BTN_0:
		{
			gpioPinDirection(BTN_0_GPIO, BTN_0_BIT,INPUT);
 2ec:	40 e0       	ldi	r20, 0x00	; 0
 2ee:	60 e1       	ldi	r22, 0x10	; 16
 2f0:	82 e0       	ldi	r24, 0x02	; 2
 2f2:	0e 94 36 00 	call	0x6c	; 0x6c <gpioPinDirection>
			break;
 2f6:	08 95       	ret
		}
		case BTN_1:
		{
			gpioPinDirection(BTN_1_GPIO, BTN_1_BIT, INPUT);
 2f8:	40 e0       	ldi	r20, 0x00	; 0
 2fa:	64 e0       	ldi	r22, 0x04	; 4
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	0e 94 36 00 	call	0x6c	; 0x6c <gpioPinDirection>
			break;
 302:	08 95       	ret
		}
		case BTN_2:
		{
			gpioPinDirection(BTN_2_GPIO, BTN_2_BIT, INPUT);
 304:	40 e0       	ldi	r20, 0x00	; 0
 306:	64 e0       	ldi	r22, 0x04	; 4
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	0e 94 36 00 	call	0x6c	; 0x6c <gpioPinDirection>
			break;
 30e:	08 95       	ret
		}
		case BTN_3:
		{
			gpioPinDirection(BTN_3_GPIO, BTN_3_BIT, INPUT);
 310:	40 e0       	ldi	r20, 0x00	; 0
 312:	68 e0       	ldi	r22, 0x08	; 8
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	0e 94 36 00 	call	0x6c	; 0x6c <gpioPinDirection>
 31a:	08 95       	ret

0000031c <pushButtonGetStatus>:
En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id)
{
	uint8_t buttonStatus=0;
	uint8_t pin_read=0;
	
	switch (en_butotn_id)
 31c:	81 30       	cpi	r24, 0x01	; 1
 31e:	61 f1       	breq	.+88     	; 0x378 <pushButtonGetStatus+0x5c>
 320:	38 f0       	brcs	.+14     	; 0x330 <pushButtonGetStatus+0x14>
 322:	82 30       	cpi	r24, 0x02	; 2
 324:	09 f4       	brne	.+2      	; 0x328 <pushButtonGetStatus+0xc>
 326:	4c c0       	rjmp	.+152    	; 0x3c0 <pushButtonGetStatus+0xa4>
 328:	83 30       	cpi	r24, 0x03	; 3
 32a:	09 f4       	brne	.+2      	; 0x32e <pushButtonGetStatus+0x12>
 32c:	6b c0       	rjmp	.+214    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 32e:	8c c0       	rjmp	.+280    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
	{
		case BTN_0:
		{
			pin_read=gpioPinRead(BTN_0_GPIO, BTN_0_BIT);
 330:	60 e1       	ldi	r22, 0x10	; 16
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	0e 94 b6 00 	call	0x16c	; 0x16c <gpioPinRead>
			if (pin_read==0)
 338:	81 11       	cpse	r24, r1
 33a:	0f c0       	rjmp	.+30     	; 0x35a <pushButtonGetStatus+0x3e>
			{
				SwDelay_ms(50);
 33c:	62 e3       	ldi	r22, 0x32	; 50
 33e:	70 e0       	ldi	r23, 0x00	; 0
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 36 02 	call	0x46c	; 0x46c <SwDelay_ms>
				pin_read=gpioPinRead(BTN_0_GPIO, BTN_0_BIT);
 348:	60 e1       	ldi	r22, 0x10	; 16
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	0e 94 b6 00 	call	0x16c	; 0x16c <gpioPinRead>
				
				if (pin_read==0)
 350:	88 23       	and	r24, r24
 352:	09 f4       	brne	.+2      	; 0x356 <pushButtonGetStatus+0x3a>
 354:	7b c0       	rjmp	.+246    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
					buttonStatus= Pressed;
					
				}
				else
				{
					buttonStatus= Released;
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	08 95       	ret
				}
			}
			else
			{
				SwDelay_ms(50);
 35a:	62 e3       	ldi	r22, 0x32	; 50
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 36 02 	call	0x46c	; 0x46c <SwDelay_ms>
				pin_read=gpioPinRead(BTN_0_GPIO, BTN_0_BIT);
 366:	60 e1       	ldi	r22, 0x10	; 16
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	0e 94 b6 00 	call	0x16c	; 0x16c <gpioPinRead>
				if (pin_read==0)
 36e:	88 23       	and	r24, r24
 370:	09 f4       	brne	.+2      	; 0x374 <pushButtonGetStatus+0x58>
 372:	6e c0       	rjmp	.+220    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
					buttonStatus= Pressed;
					
				}
				else
				{
					buttonStatus= Released;
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	08 95       	ret
			break;
		}
		
		case BTN_1:
		{
			pin_read=gpioPinRead(BTN_1_GPIO, BTN_1_BIT);
 378:	64 e0       	ldi	r22, 0x04	; 4
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	0e 94 b6 00 	call	0x16c	; 0x16c <gpioPinRead>
			if (pin_read==0)
 380:	81 11       	cpse	r24, r1
 382:	0f c0       	rjmp	.+30     	; 0x3a2 <pushButtonGetStatus+0x86>
			{
				SwDelay_ms(50);
 384:	62 e3       	ldi	r22, 0x32	; 50
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 36 02 	call	0x46c	; 0x46c <SwDelay_ms>
				pin_read=gpioPinRead(BTN_1_GPIO, BTN_1_BIT);
 390:	64 e0       	ldi	r22, 0x04	; 4
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	0e 94 b6 00 	call	0x16c	; 0x16c <gpioPinRead>
				
				if (pin_read==0)
 398:	88 23       	and	r24, r24
 39a:	09 f4       	brne	.+2      	; 0x39e <pushButtonGetStatus+0x82>
 39c:	5b c0       	rjmp	.+182    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
					buttonStatus= Pressed;
					
				}
				else
				{
					buttonStatus= Released;
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	08 95       	ret
				}
			}
			else
			{
				SwDelay_ms(50);
 3a2:	62 e3       	ldi	r22, 0x32	; 50
 3a4:	70 e0       	ldi	r23, 0x00	; 0
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 36 02 	call	0x46c	; 0x46c <SwDelay_ms>
				pin_read=gpioPinRead(BTN_1_GPIO, BTN_1_BIT);
 3ae:	64 e0       	ldi	r22, 0x04	; 4
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 b6 00 	call	0x16c	; 0x16c <gpioPinRead>
				if (pin_read==0)
 3b6:	88 23       	and	r24, r24
 3b8:	09 f4       	brne	.+2      	; 0x3bc <pushButtonGetStatus+0xa0>
 3ba:	4e c0       	rjmp	.+156    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
					buttonStatus= Pressed;
					
				}
				else
				{
					buttonStatus= Released;
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	08 95       	ret
			}
			break;
		}
		case BTN_2:
		{
			pin_read=gpioPinRead(BTN_2_GPIO, BTN_2_BIT);
 3c0:	64 e0       	ldi	r22, 0x04	; 4
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	0e 94 b6 00 	call	0x16c	; 0x16c <gpioPinRead>
			if (pin_read==0)
 3c8:	81 11       	cpse	r24, r1
 3ca:	0e c0       	rjmp	.+28     	; 0x3e8 <pushButtonGetStatus+0xcc>
			{
				SwDelay_ms(50);
 3cc:	62 e3       	ldi	r22, 0x32	; 50
 3ce:	70 e0       	ldi	r23, 0x00	; 0
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	0e 94 36 02 	call	0x46c	; 0x46c <SwDelay_ms>
				pin_read=gpioPinRead(BTN_2_GPIO, BTN_2_BIT);
 3d8:	64 e0       	ldi	r22, 0x04	; 4
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	0e 94 b6 00 	call	0x16c	; 0x16c <gpioPinRead>
				
				if (pin_read==0)
 3e0:	88 23       	and	r24, r24
 3e2:	e1 f1       	breq	.+120    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
					buttonStatus= Pressed;
					
				}
				else
				{
					buttonStatus= Released;
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	08 95       	ret
				}
			}
			else
			{
				SwDelay_ms(50);
 3e8:	62 e3       	ldi	r22, 0x32	; 50
 3ea:	70 e0       	ldi	r23, 0x00	; 0
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 36 02 	call	0x46c	; 0x46c <SwDelay_ms>
				pin_read=gpioPinRead(BTN_2_GPIO, BTN_2_BIT);
 3f4:	64 e0       	ldi	r22, 0x04	; 4
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	0e 94 b6 00 	call	0x16c	; 0x16c <gpioPinRead>
				if (pin_read==0)
 3fc:	88 23       	and	r24, r24
 3fe:	81 f1       	breq	.+96     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
					buttonStatus= Pressed;
					
				}
				else
				{
					buttonStatus= Released;
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	08 95       	ret
			}
			break;
		}
		case BTN_3:
		{
			pin_read=gpioPinRead(BTN_3_GPIO, BTN_3_BIT);
 404:	68 e0       	ldi	r22, 0x08	; 8
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	0e 94 b6 00 	call	0x16c	; 0x16c <gpioPinRead>
				if (pin_read==0)
 40c:	81 11       	cpse	r24, r1
 40e:	0e c0       	rjmp	.+28     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
				{
					SwDelay_ms(50);
 410:	62 e3       	ldi	r22, 0x32	; 50
 412:	70 e0       	ldi	r23, 0x00	; 0
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 36 02 	call	0x46c	; 0x46c <SwDelay_ms>
					pin_read=gpioPinRead(BTN_3_GPIO, BTN_3_BIT);
 41c:	68 e0       	ldi	r22, 0x08	; 8
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	0e 94 b6 00 	call	0x16c	; 0x16c <gpioPinRead>
					
					if (pin_read==0)
 424:	88 23       	and	r24, r24
 426:	f1 f0       	breq	.+60     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
						buttonStatus= Pressed;
						
					}
					else
					{
						buttonStatus= Released;
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	08 95       	ret
					}
				}
				else
				{
					SwDelay_ms(50);
 42c:	62 e3       	ldi	r22, 0x32	; 50
 42e:	70 e0       	ldi	r23, 0x00	; 0
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 36 02 	call	0x46c	; 0x46c <SwDelay_ms>
					pin_read=gpioPinRead(BTN_3_GPIO, BTN_3_BIT);
 438:	68 e0       	ldi	r22, 0x08	; 8
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	0e 94 b6 00 	call	0x16c	; 0x16c <gpioPinRead>
					if (pin_read==0)
 440:	88 23       	and	r24, r24
 442:	91 f0       	breq	.+36     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
						buttonStatus= Pressed;
						
					}
					else
					{
						buttonStatus= Released;
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	08 95       	ret
}


En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id)
{
	uint8_t buttonStatus=0;
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	08 95       	ret
				SwDelay_ms(50);
				pin_read=gpioPinRead(BTN_0_GPIO, BTN_0_BIT);
				
				if (pin_read==0)
				{
					buttonStatus= Pressed;
 44c:	82 e0       	ldi	r24, 0x02	; 2
 44e:	08 95       	ret
			{
				SwDelay_ms(50);
				pin_read=gpioPinRead(BTN_0_GPIO, BTN_0_BIT);
				if (pin_read==0)
				{
					buttonStatus= Pressed;
 450:	82 e0       	ldi	r24, 0x02	; 2
 452:	08 95       	ret
				SwDelay_ms(50);
				pin_read=gpioPinRead(BTN_1_GPIO, BTN_1_BIT);
				
				if (pin_read==0)
				{
					buttonStatus= Pressed;
 454:	82 e0       	ldi	r24, 0x02	; 2
 456:	08 95       	ret
			{
				SwDelay_ms(50);
				pin_read=gpioPinRead(BTN_1_GPIO, BTN_1_BIT);
				if (pin_read==0)
				{
					buttonStatus= Pressed;
 458:	82 e0       	ldi	r24, 0x02	; 2
 45a:	08 95       	ret
				SwDelay_ms(50);
				pin_read=gpioPinRead(BTN_2_GPIO, BTN_2_BIT);
				
				if (pin_read==0)
				{
					buttonStatus= Pressed;
 45c:	82 e0       	ldi	r24, 0x02	; 2
 45e:	08 95       	ret
			{
				SwDelay_ms(50);
				pin_read=gpioPinRead(BTN_2_GPIO, BTN_2_BIT);
				if (pin_read==0)
				{
					buttonStatus= Pressed;
 460:	82 e0       	ldi	r24, 0x02	; 2
 462:	08 95       	ret
					SwDelay_ms(50);
					pin_read=gpioPinRead(BTN_3_GPIO, BTN_3_BIT);
					
					if (pin_read==0)
					{
						buttonStatus= Pressed;
 464:	82 e0       	ldi	r24, 0x02	; 2
 466:	08 95       	ret
				{
					SwDelay_ms(50);
					pin_read=gpioPinRead(BTN_3_GPIO, BTN_3_BIT);
					if (pin_read==0)
					{
						buttonStatus= Pressed;
 468:	82 e0       	ldi	r24, 0x02	; 2
		default :
		break;
	}
	return buttonStatus;
	
}
 46a:	08 95       	ret

0000046c <SwDelay_ms>:
 * Created: 1/18/2020 2:48:30 PM
 *  Author: A_ayman
 */ 
#include "std_types.h"
void SwDelay_ms(uint32_t n)
{
 46c:	cf 92       	push	r12
 46e:	df 92       	push	r13
 470:	ef 92       	push	r14
 472:	ff 92       	push	r15
 474:	cf 93       	push	r28
 476:	df 93       	push	r29
 478:	00 d0       	rcall	.+0      	; 0x47a <SwDelay_ms+0xe>
 47a:	00 d0       	rcall	.+0      	; 0x47c <SwDelay_ms+0x10>
 47c:	cd b7       	in	r28, 0x3d	; 61
 47e:	de b7       	in	r29, 0x3e	; 62
 480:	6b 01       	movw	r12, r22
 482:	7c 01       	movw	r14, r24
	/* this function will give you a delay of 1 ms if your frequency is 8 MHZ
		                                   of 2 ms if your frequency is 4 MHZ
	*/
	volatile uint32_t z=0;
 484:	19 82       	std	Y+1, r1	; 0x01
 486:	1a 82       	std	Y+2, r1	; 0x02
 488:	1b 82       	std	Y+3, r1	; 0x03
 48a:	1c 82       	std	Y+4, r1	; 0x04
    uint16_t j=0;
	uint32_t i=0;
	
	for(i=0; i<n;i++)
 48c:	67 2b       	or	r22, r23
 48e:	68 2b       	or	r22, r24
 490:	69 2b       	or	r22, r25
 492:	c9 f4       	brne	.+50     	; 0x4c6 <SwDelay_ms+0x5a>
 494:	1e c0       	rjmp	.+60     	; 0x4d2 <SwDelay_ms+0x66>
	{
		for( j=0; j<350;j++)
		{
			z++;
 496:	89 81       	ldd	r24, Y+1	; 0x01
 498:	9a 81       	ldd	r25, Y+2	; 0x02
 49a:	ab 81       	ldd	r26, Y+3	; 0x03
 49c:	bc 81       	ldd	r27, Y+4	; 0x04
 49e:	01 96       	adiw	r24, 0x01	; 1
 4a0:	a1 1d       	adc	r26, r1
 4a2:	b1 1d       	adc	r27, r1
 4a4:	89 83       	std	Y+1, r24	; 0x01
 4a6:	9a 83       	std	Y+2, r25	; 0x02
 4a8:	ab 83       	std	Y+3, r26	; 0x03
 4aa:	bc 83       	std	Y+4, r27	; 0x04
 4ac:	21 50       	subi	r18, 0x01	; 1
 4ae:	31 09       	sbc	r19, r1
    uint16_t j=0;
	uint32_t i=0;
	
	for(i=0; i<n;i++)
	{
		for( j=0; j<350;j++)
 4b0:	91 f7       	brne	.-28     	; 0x496 <SwDelay_ms+0x2a>
	*/
	volatile uint32_t z=0;
    uint16_t j=0;
	uint32_t i=0;
	
	for(i=0; i<n;i++)
 4b2:	4f 5f       	subi	r20, 0xFF	; 255
 4b4:	5f 4f       	sbci	r21, 0xFF	; 255
 4b6:	6f 4f       	sbci	r22, 0xFF	; 255
 4b8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ba:	c4 16       	cp	r12, r20
 4bc:	d5 06       	cpc	r13, r21
 4be:	e6 06       	cpc	r14, r22
 4c0:	f7 06       	cpc	r15, r23
 4c2:	21 f4       	brne	.+8      	; 0x4cc <SwDelay_ms+0x60>
 4c4:	06 c0       	rjmp	.+12     	; 0x4d2 <SwDelay_ms+0x66>
 4c6:	40 e0       	ldi	r20, 0x00	; 0
 4c8:	50 e0       	ldi	r21, 0x00	; 0
 4ca:	ba 01       	movw	r22, r20
 * Created: 1/18/2020 2:48:30 PM
 *  Author: A_ayman
 */ 
#include "std_types.h"
void SwDelay_ms(uint32_t n)
{
 4cc:	2e e5       	ldi	r18, 0x5E	; 94
 4ce:	31 e0       	ldi	r19, 0x01	; 1
 4d0:	e2 cf       	rjmp	.-60     	; 0x496 <SwDelay_ms+0x2a>
		for( j=0; j<350;j++)
		{
			z++;
		}	
	}
}
 4d2:	0f 90       	pop	r0
 4d4:	0f 90       	pop	r0
 4d6:	0f 90       	pop	r0
 4d8:	0f 90       	pop	r0
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	ff 90       	pop	r15
 4e0:	ef 90       	pop	r14
 4e2:	df 90       	pop	r13
 4e4:	cf 90       	pop	r12
 4e6:	08 95       	ret

000004e8 <_exit>:
 4e8:	f8 94       	cli

000004ea <__stop_program>:
 4ea:	ff cf       	rjmp	.-2      	; 0x4ea <__stop_program>
