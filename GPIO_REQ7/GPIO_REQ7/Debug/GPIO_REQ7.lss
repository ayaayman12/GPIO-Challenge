
GPIO_REQ7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000646  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000069a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000069a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001595  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a7  00000000  00000000  00001d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000932  00000000  00000000  00002514  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  00002e48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b2  00000000  00000000  00002f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c54  00000000  00000000  0000344e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000040a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	1d 01       	movw	r2, r26
  56:	32 01       	movw	r6, r4
  58:	47 01       	movw	r8, r14
  5a:	5c 01       	movw	r10, r24
  5c:	71 01       	movw	r14, r2
  5e:	86 01       	movw	r16, r12
  60:	9b 01       	movw	r18, r22
  62:	b0 01       	movw	r22, r0
  64:	c5 01       	movw	r24, r10
  66:	da 01       	movw	r26, r20
  68:	fa 01       	movw	r30, r20
  6a:	0f 02       	muls	r16, r31
  6c:	24 02       	muls	r18, r20
  6e:	39 02       	muls	r19, r25
  70:	4e 02       	muls	r20, r30
  72:	63 02       	muls	r22, r19
  74:	78 02       	muls	r23, r24
  76:	8d 02       	muls	r24, r29
  78:	a2 02       	muls	r26, r18
  7a:	b7 02       	muls	r27, r23

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf e5       	ldi	r28, 0x5F	; 95
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 ca 00 	call	0x194	; 0x194 <main>
  8c:	0c 94 21 03 	jmp	0x642	; 0x642 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <gpioPinDirection>:
}


void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
	switch(u8_port)
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	a1 f0       	breq	.+40     	; 0xc0 <gpioPinDirection+0x2c>
  98:	28 f0       	brcs	.+10     	; 0xa4 <gpioPinDirection+0x10>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	f9 f0       	breq	.+62     	; 0xdc <gpioPinDirection+0x48>
  9e:	83 30       	cpi	r24, 0x03	; 3
  a0:	59 f1       	breq	.+86     	; 0xf8 <gpioPinDirection+0x64>
  a2:	08 95       	ret
	{
		case GPIOA:
		{
			switch (u8_direction)
  a4:	44 23       	and	r20, r20
  a6:	19 f0       	breq	.+6      	; 0xae <gpioPinDirection+0x1a>
  a8:	4f 3f       	cpi	r20, 0xFF	; 255
  aa:	31 f0       	breq	.+12     	; 0xb8 <gpioPinDirection+0x24>
  ac:	08 95       	ret
			{
				case INPUT:
				{
					PORTA_DIR&=~u8_pins;
  ae:	8a b3       	in	r24, 0x1a	; 26
  b0:	60 95       	com	r22
  b2:	68 23       	and	r22, r24
  b4:	6a bb       	out	0x1a, r22	; 26
					break;
  b6:	08 95       	ret
				}
				case OUTPUT:
				{
					PORTA_DIR|=u8_pins;
  b8:	8a b3       	in	r24, 0x1a	; 26
  ba:	68 2b       	or	r22, r24
  bc:	6a bb       	out	0x1a, r22	; 26
					break;
  be:	08 95       	ret
			}
			break;
		}
		case GPIOB:
		{
			switch (u8_direction)
  c0:	44 23       	and	r20, r20
  c2:	19 f0       	breq	.+6      	; 0xca <gpioPinDirection+0x36>
  c4:	4f 3f       	cpi	r20, 0xFF	; 255
  c6:	31 f0       	breq	.+12     	; 0xd4 <gpioPinDirection+0x40>
  c8:	08 95       	ret
			{
				case INPUT:
				{
					PORTB_DIR&=~u8_pins;
  ca:	87 b3       	in	r24, 0x17	; 23
  cc:	60 95       	com	r22
  ce:	68 23       	and	r22, r24
  d0:	67 bb       	out	0x17, r22	; 23
					break;
  d2:	08 95       	ret
				}
				case OUTPUT:
				{
					PORTB_DIR|=u8_pins;
  d4:	87 b3       	in	r24, 0x17	; 23
  d6:	68 2b       	or	r22, r24
  d8:	67 bb       	out	0x17, r22	; 23
					break;
  da:	08 95       	ret
			}
			break;
		}
		case GPIOC:
		{
			switch (u8_direction)
  dc:	44 23       	and	r20, r20
  de:	19 f0       	breq	.+6      	; 0xe6 <gpioPinDirection+0x52>
  e0:	4f 3f       	cpi	r20, 0xFF	; 255
  e2:	31 f0       	breq	.+12     	; 0xf0 <gpioPinDirection+0x5c>
  e4:	08 95       	ret
			{
				case INPUT:
				{
					PORTC_DIR&=~u8_pins;
  e6:	84 b3       	in	r24, 0x14	; 20
  e8:	60 95       	com	r22
  ea:	68 23       	and	r22, r24
  ec:	64 bb       	out	0x14, r22	; 20
					break;
  ee:	08 95       	ret
				}
				case OUTPUT:
				{
					PORTC_DIR|=u8_pins;
  f0:	84 b3       	in	r24, 0x14	; 20
  f2:	68 2b       	or	r22, r24
  f4:	64 bb       	out	0x14, r22	; 20
					break;
  f6:	08 95       	ret
			}
			break;
		}
		case GPIOD:
		{
			switch (u8_direction)
  f8:	44 23       	and	r20, r20
  fa:	19 f0       	breq	.+6      	; 0x102 <gpioPinDirection+0x6e>
  fc:	4f 3f       	cpi	r20, 0xFF	; 255
  fe:	31 f0       	breq	.+12     	; 0x10c <gpioPinDirection+0x78>
 100:	08 95       	ret
			{
				case INPUT:
				{
					PORTD_DIR&=~u8_pins;
 102:	81 b3       	in	r24, 0x11	; 17
 104:	60 95       	com	r22
 106:	68 23       	and	r22, r24
 108:	61 bb       	out	0x11, r22	; 17
					break;
 10a:	08 95       	ret
				}
				case OUTPUT:
				{
					PORTD_DIR|=u8_pins;
 10c:	81 b3       	in	r24, 0x11	; 17
 10e:	68 2b       	or	r22, r24
 110:	61 bb       	out	0x11, r22	; 17
 112:	08 95       	ret

00000114 <gpioPinWrite>:
}


void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{
	switch(u8_port)
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	a1 f0       	breq	.+40     	; 0x140 <gpioPinWrite+0x2c>
 118:	28 f0       	brcs	.+10     	; 0x124 <gpioPinWrite+0x10>
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	f9 f0       	breq	.+62     	; 0x15c <gpioPinWrite+0x48>
 11e:	83 30       	cpi	r24, 0x03	; 3
 120:	59 f1       	breq	.+86     	; 0x178 <gpioPinWrite+0x64>
 122:	08 95       	ret
	{
		case GPIOA:
		{
			switch (u8_value)
 124:	44 23       	and	r20, r20
 126:	19 f0       	breq	.+6      	; 0x12e <gpioPinWrite+0x1a>
 128:	4f 3f       	cpi	r20, 0xFF	; 255
 12a:	31 f0       	breq	.+12     	; 0x138 <gpioPinWrite+0x24>
 12c:	08 95       	ret
			{
				case LOW:
				{
					PORTA_DATA&=~u8_pins;
 12e:	8b b3       	in	r24, 0x1b	; 27
 130:	60 95       	com	r22
 132:	68 23       	and	r22, r24
 134:	6b bb       	out	0x1b, r22	; 27
					break;
 136:	08 95       	ret
				}
				case HIGH:
				{
					PORTA_DATA|=u8_pins;
 138:	8b b3       	in	r24, 0x1b	; 27
 13a:	68 2b       	or	r22, r24
 13c:	6b bb       	out	0x1b, r22	; 27
					break;
 13e:	08 95       	ret
			}
			break;
		}
		case GPIOB:
		{
			switch (u8_value)
 140:	44 23       	and	r20, r20
 142:	19 f0       	breq	.+6      	; 0x14a <gpioPinWrite+0x36>
 144:	4f 3f       	cpi	r20, 0xFF	; 255
 146:	31 f0       	breq	.+12     	; 0x154 <gpioPinWrite+0x40>
 148:	08 95       	ret
			{
				case LOW:
				{
					PORTB_DATA&=~u8_pins;
 14a:	88 b3       	in	r24, 0x18	; 24
 14c:	60 95       	com	r22
 14e:	68 23       	and	r22, r24
 150:	68 bb       	out	0x18, r22	; 24
					break;
 152:	08 95       	ret
				}
				case HIGH:
				{
					PORTB_DATA|=u8_pins;
 154:	88 b3       	in	r24, 0x18	; 24
 156:	68 2b       	or	r22, r24
 158:	68 bb       	out	0x18, r22	; 24
					break;
 15a:	08 95       	ret
			}
			break;
		}
		case GPIOC:
		{
			switch (u8_value)
 15c:	44 23       	and	r20, r20
 15e:	19 f0       	breq	.+6      	; 0x166 <gpioPinWrite+0x52>
 160:	4f 3f       	cpi	r20, 0xFF	; 255
 162:	31 f0       	breq	.+12     	; 0x170 <gpioPinWrite+0x5c>
 164:	08 95       	ret
			{
				case LOW:
				{
					PORTC_DATA&=~u8_pins;
 166:	85 b3       	in	r24, 0x15	; 21
 168:	60 95       	com	r22
 16a:	68 23       	and	r22, r24
 16c:	65 bb       	out	0x15, r22	; 21
					break;
 16e:	08 95       	ret
				}
				case HIGH:
				{
					PORTC_DATA|=u8_pins;
 170:	85 b3       	in	r24, 0x15	; 21
 172:	68 2b       	or	r22, r24
 174:	65 bb       	out	0x15, r22	; 21
					break;
 176:	08 95       	ret
			}
			break;
		}
		case GPIOD:
		{
			switch (u8_value)
 178:	44 23       	and	r20, r20
 17a:	19 f0       	breq	.+6      	; 0x182 <gpioPinWrite+0x6e>
 17c:	4f 3f       	cpi	r20, 0xFF	; 255
 17e:	31 f0       	breq	.+12     	; 0x18c <gpioPinWrite+0x78>
 180:	08 95       	ret
			{
				case INPUT:
				{
					PORTD_DATA&=~u8_pins;
 182:	82 b3       	in	r24, 0x12	; 18
 184:	60 95       	com	r22
 186:	68 23       	and	r22, r24
 188:	62 bb       	out	0x12, r22	; 18
					break;
 18a:	08 95       	ret
				}
				case OUTPUT:
				{
					PORTD_DATA|=u8_pins;
 18c:	82 b3       	in	r24, 0x12	; 18
 18e:	68 2b       	or	r22, r24
 190:	62 bb       	out	0x12, r22	; 18
 192:	08 95       	ret

00000194 <main>:
int main(void)
{
	uint8_t count=0;
	uint8_t count2=0;
    /* Replace with your application code */
	 sevenSegInit(SEG_0);
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <sevenSegInit>
	 sevenSegInit(SEG_1);
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <sevenSegInit>
	sevenSegWrite(SEG_0,3);
 1a0:	63 e0       	ldi	r22, 0x03	; 3
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	0e 94 0c 01 	call	0x218	; 0x218 <sevenSegWrite>
// 	sevenSegDisable(SEG_0);
// 	sevenSegEnable(SEG_0);
// 	sevenSegWrite(SEG_1,count2);
// 	sevenSegDisable(SEG_1);
	
	sevenSegEnable(SEG_0);
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	0e 94 cc 02 	call	0x598	; 0x598 <sevenSegEnable>
    while (1) 
    {
		
		sevenSegWrite(SEG_0,count);
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	0e 94 0c 01 	call	0x218	; 0x218 <sevenSegWrite>
		
		count++;
 1b6:	c1 e0       	ldi	r28, 0x01	; 1
 1b8:	01 c0       	rjmp	.+2      	; 0x1bc <main+0x28>
		if (count==9)
		{
			count=0;
 1ba:	c0 e0       	ldi	r28, 0x00	; 0
			count2++;
		}
		SwDelay_ms(1000);
 1bc:	68 ee       	ldi	r22, 0xE8	; 232
 1be:	73 e0       	ldi	r23, 0x03	; 3
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SwDelay_ms>
	
	sevenSegEnable(SEG_0);
    while (1) 
    {
		
		sevenSegWrite(SEG_0,count);
 1c8:	6c 2f       	mov	r22, r28
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	0e 94 0c 01 	call	0x218	; 0x218 <sevenSegWrite>
		
		count++;
 1d0:	cf 5f       	subi	r28, 0xFF	; 255
		if (count==9)
 1d2:	c9 30       	cpi	r28, 0x09	; 9
 1d4:	99 f7       	brne	.-26     	; 0x1bc <main+0x28>
 1d6:	f1 cf       	rjmp	.-30     	; 0x1ba <main+0x26>

000001d8 <sevenSegInit>:

#include "sevenSeg.h"

void sevenSegInit(En_SevenSegId_t a_segment_id)
{
	switch (a_segment_id)
 1d8:	88 23       	and	r24, r24
 1da:	19 f0       	breq	.+6      	; 0x1e2 <sevenSegInit+0xa>
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	89 f0       	breq	.+34     	; 0x202 <sevenSegInit+0x2a>
 1e0:	08 95       	ret
	{
		case SEG_0:
		{
			gpioPinDirection(SEG_BCD_GPIO,SEG_BCD_BITS,OUTPUT);  //set data bits direction as output
 1e2:	4f ef       	ldi	r20, 0xFF	; 255
 1e4:	6f e0       	ldi	r22, 0x0F	; 15
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	0e 94 4a 00 	call	0x94	; 0x94 <gpioPinDirection>
		    gpioPinDirection(SEG_EN1_GPIO,SEG_EN1_BIT,OUTPUT);   //set enable bit direction as output
 1ec:	4f ef       	ldi	r20, 0xFF	; 255
 1ee:	64 e0       	ldi	r22, 0x04	; 4
 1f0:	83 e0       	ldi	r24, 0x03	; 3
 1f2:	0e 94 4a 00 	call	0x94	; 0x94 <gpioPinDirection>
			gpioPinWrite(SEG_BCD_GPIO,SEG_BCD_BITS,LOW);
 1f6:	40 e0       	ldi	r20, 0x00	; 0
 1f8:	6f e0       	ldi	r22, 0x0F	; 15
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>

			
			break;
 200:	08 95       	ret
			
		}
		case SEG_1:
		{
			gpioPinDirection(SEG_BCD_GPIO,SEG_BCD_BITS,OUTPUT);  //set data bits direction as output
 202:	4f ef       	ldi	r20, 0xFF	; 255
 204:	6f e0       	ldi	r22, 0x0F	; 15
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	0e 94 4a 00 	call	0x94	; 0x94 <gpioPinDirection>
			gpioPinDirection(SEG_EN2_GPIO,SEG_EN2_BIT,OUTPUT);   //set enable bit direction as output
 20c:	4f ef       	ldi	r20, 0xFF	; 255
 20e:	68 e0       	ldi	r22, 0x08	; 8
 210:	83 e0       	ldi	r24, 0x03	; 3
 212:	0e 94 4a 00 	call	0x94	; 0x94 <gpioPinDirection>
 216:	08 95       	ret

00000218 <sevenSegWrite>:
	
}

void sevenSegWrite(En_SevenSegId_t en_segment_id, uint8_t u8_number)
{
	switch( en_segment_id)
 218:	88 23       	and	r24, r24
 21a:	21 f0       	breq	.+8      	; 0x224 <sevenSegWrite+0xc>
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	09 f4       	brne	.+2      	; 0x222 <sevenSegWrite+0xa>
 220:	de c0       	rjmp	.+444    	; 0x3de <sevenSegWrite+0x1c6>
 222:	08 95       	ret
	{
		case SEG_0:
		{
			switch (u8_number)
 224:	86 2f       	mov	r24, r22
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	8a 30       	cpi	r24, 0x0A	; 10
 22a:	91 05       	cpc	r25, r1
 22c:	08 f0       	brcs	.+2      	; 0x230 <sevenSegWrite+0x18>
 22e:	b3 c1       	rjmp	.+870    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 230:	fc 01       	movw	r30, r24
 232:	e6 5d       	subi	r30, 0xD6	; 214
 234:	ff 4f       	sbci	r31, 0xFF	; 255
 236:	0c 94 1b 03 	jmp	0x636	; 0x636 <__tablejump2__>
			{
				case 0:
				gpioPinWrite(SEG_BCD_GPIO,BIT0,LOW);
 23a:	40 e0       	ldi	r20, 0x00	; 0
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT1,LOW);
 244:	40 e0       	ldi	r20, 0x00	; 0
 246:	62 e0       	ldi	r22, 0x02	; 2
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT2,LOW);
 24e:	40 e0       	ldi	r20, 0x00	; 0
 250:	64 e0       	ldi	r22, 0x04	; 4
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT3,LOW);
 258:	40 e0       	ldi	r20, 0x00	; 0
 25a:	68 e0       	ldi	r22, 0x08	; 8
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				break;
 262:	08 95       	ret
				
				case 1:
				gpioPinWrite(SEG_BCD_GPIO,BIT0,HIGH);
 264:	4f ef       	ldi	r20, 0xFF	; 255
 266:	61 e0       	ldi	r22, 0x01	; 1
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT1,LOW);
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	62 e0       	ldi	r22, 0x02	; 2
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT2,LOW);
 278:	40 e0       	ldi	r20, 0x00	; 0
 27a:	64 e0       	ldi	r22, 0x04	; 4
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT3,LOW);
 282:	40 e0       	ldi	r20, 0x00	; 0
 284:	68 e0       	ldi	r22, 0x08	; 8
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				break;
 28c:	08 95       	ret
				
				case 2:
				gpioPinWrite(SEG_BCD_GPIO,BIT0,LOW);
 28e:	40 e0       	ldi	r20, 0x00	; 0
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT1,HIGH);
 298:	4f ef       	ldi	r20, 0xFF	; 255
 29a:	62 e0       	ldi	r22, 0x02	; 2
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT2,LOW);
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	64 e0       	ldi	r22, 0x04	; 4
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT3,LOW);
 2ac:	40 e0       	ldi	r20, 0x00	; 0
 2ae:	68 e0       	ldi	r22, 0x08	; 8
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				break;
 2b6:	08 95       	ret
				
				case 3:
				gpioPinWrite(SEG_BCD_GPIO,BIT0,HIGH);
 2b8:	4f ef       	ldi	r20, 0xFF	; 255
 2ba:	61 e0       	ldi	r22, 0x01	; 1
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT1,HIGH);
 2c2:	4f ef       	ldi	r20, 0xFF	; 255
 2c4:	62 e0       	ldi	r22, 0x02	; 2
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT2,LOW);
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	64 e0       	ldi	r22, 0x04	; 4
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT3,LOW);
 2d6:	40 e0       	ldi	r20, 0x00	; 0
 2d8:	68 e0       	ldi	r22, 0x08	; 8
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				break;
 2e0:	08 95       	ret
				case 4:
				gpioPinWrite(SEG_BCD_GPIO,BIT0,LOW);
 2e2:	40 e0       	ldi	r20, 0x00	; 0
 2e4:	61 e0       	ldi	r22, 0x01	; 1
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT1,LOW);
 2ec:	40 e0       	ldi	r20, 0x00	; 0
 2ee:	62 e0       	ldi	r22, 0x02	; 2
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT2,HIGH);
 2f6:	4f ef       	ldi	r20, 0xFF	; 255
 2f8:	64 e0       	ldi	r22, 0x04	; 4
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT3,LOW);
 300:	40 e0       	ldi	r20, 0x00	; 0
 302:	68 e0       	ldi	r22, 0x08	; 8
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				break;
 30a:	08 95       	ret
				case 5:
				gpioPinWrite(SEG_BCD_GPIO,BIT0,HIGH);
 30c:	4f ef       	ldi	r20, 0xFF	; 255
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT1,LOW);
 316:	40 e0       	ldi	r20, 0x00	; 0
 318:	62 e0       	ldi	r22, 0x02	; 2
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT2,HIGH);
 320:	4f ef       	ldi	r20, 0xFF	; 255
 322:	64 e0       	ldi	r22, 0x04	; 4
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT3,LOW);
 32a:	40 e0       	ldi	r20, 0x00	; 0
 32c:	68 e0       	ldi	r22, 0x08	; 8
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				break;
 334:	08 95       	ret
				case 6:
				gpioPinWrite(SEG_BCD_GPIO,BIT0,LOW);
 336:	40 e0       	ldi	r20, 0x00	; 0
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT1,HIGH);
 340:	4f ef       	ldi	r20, 0xFF	; 255
 342:	62 e0       	ldi	r22, 0x02	; 2
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT2,HIGH);
 34a:	4f ef       	ldi	r20, 0xFF	; 255
 34c:	64 e0       	ldi	r22, 0x04	; 4
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT3,LOW);
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	68 e0       	ldi	r22, 0x08	; 8
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				break;
 35e:	08 95       	ret
				case 7:
				gpioPinWrite(SEG_BCD_GPIO,BIT0,HIGH);
 360:	4f ef       	ldi	r20, 0xFF	; 255
 362:	61 e0       	ldi	r22, 0x01	; 1
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT1,HIGH);
 36a:	4f ef       	ldi	r20, 0xFF	; 255
 36c:	62 e0       	ldi	r22, 0x02	; 2
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT2,HIGH);
 374:	4f ef       	ldi	r20, 0xFF	; 255
 376:	64 e0       	ldi	r22, 0x04	; 4
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT3,LOW);
 37e:	40 e0       	ldi	r20, 0x00	; 0
 380:	68 e0       	ldi	r22, 0x08	; 8
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				break;
 388:	08 95       	ret
				case 8:
				gpioPinWrite(SEG_BCD_GPIO,BIT0,LOW);
 38a:	40 e0       	ldi	r20, 0x00	; 0
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT1,LOW);
 394:	40 e0       	ldi	r20, 0x00	; 0
 396:	62 e0       	ldi	r22, 0x02	; 2
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT2,LOW);
 39e:	40 e0       	ldi	r20, 0x00	; 0
 3a0:	64 e0       	ldi	r22, 0x04	; 4
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT3,HIGH);
 3a8:	4f ef       	ldi	r20, 0xFF	; 255
 3aa:	68 e0       	ldi	r22, 0x08	; 8
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				break;
 3b2:	08 95       	ret
				case 9:
				gpioPinWrite(SEG_BCD_GPIO,BIT0,HIGH);
 3b4:	4f ef       	ldi	r20, 0xFF	; 255
 3b6:	61 e0       	ldi	r22, 0x01	; 1
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT1,LOW);
 3be:	40 e0       	ldi	r20, 0x00	; 0
 3c0:	62 e0       	ldi	r22, 0x02	; 2
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT2,LOW);
 3c8:	40 e0       	ldi	r20, 0x00	; 0
 3ca:	64 e0       	ldi	r22, 0x04	; 4
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT3,HIGH);
 3d2:	4f ef       	ldi	r20, 0xFF	; 255
 3d4:	68 e0       	ldi	r22, 0x08	; 8
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				break;
 3dc:	08 95       	ret
	
			break;
		}
		case SEG_1:
		{
			switch (u8_number)
 3de:	86 2f       	mov	r24, r22
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	8a 30       	cpi	r24, 0x0A	; 10
 3e4:	91 05       	cpc	r25, r1
 3e6:	08 f0       	brcs	.+2      	; 0x3ea <sevenSegWrite+0x1d2>
 3e8:	d6 c0       	rjmp	.+428    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 3ea:	fc 01       	movw	r30, r24
 3ec:	ec 5c       	subi	r30, 0xCC	; 204
 3ee:	ff 4f       	sbci	r31, 0xFF	; 255
 3f0:	0c 94 1b 03 	jmp	0x636	; 0x636 <__tablejump2__>
			{
				case 0:
				gpioPinWrite(SEG_BCD_GPIO,BIT0,LOW);
 3f4:	40 e0       	ldi	r20, 0x00	; 0
 3f6:	61 e0       	ldi	r22, 0x01	; 1
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT1,LOW);
 3fe:	40 e0       	ldi	r20, 0x00	; 0
 400:	62 e0       	ldi	r22, 0x02	; 2
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT2,LOW);
 408:	40 e0       	ldi	r20, 0x00	; 0
 40a:	64 e0       	ldi	r22, 0x04	; 4
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT3,LOW);
 412:	40 e0       	ldi	r20, 0x00	; 0
 414:	68 e0       	ldi	r22, 0x08	; 8
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				break;
 41c:	08 95       	ret
				
				case 1:
				gpioPinWrite(SEG_BCD_GPIO,BIT0,HIGH);
 41e:	4f ef       	ldi	r20, 0xFF	; 255
 420:	61 e0       	ldi	r22, 0x01	; 1
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT1,LOW);
 428:	40 e0       	ldi	r20, 0x00	; 0
 42a:	62 e0       	ldi	r22, 0x02	; 2
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT2,LOW);
 432:	40 e0       	ldi	r20, 0x00	; 0
 434:	64 e0       	ldi	r22, 0x04	; 4
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT3,LOW);
 43c:	40 e0       	ldi	r20, 0x00	; 0
 43e:	68 e0       	ldi	r22, 0x08	; 8
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				break;
 446:	08 95       	ret
				
				case 2:
				gpioPinWrite(SEG_BCD_GPIO,BIT0,LOW);
 448:	40 e0       	ldi	r20, 0x00	; 0
 44a:	61 e0       	ldi	r22, 0x01	; 1
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT1,HIGH);
 452:	4f ef       	ldi	r20, 0xFF	; 255
 454:	62 e0       	ldi	r22, 0x02	; 2
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT2,LOW);
 45c:	40 e0       	ldi	r20, 0x00	; 0
 45e:	64 e0       	ldi	r22, 0x04	; 4
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT3,LOW);
 466:	40 e0       	ldi	r20, 0x00	; 0
 468:	68 e0       	ldi	r22, 0x08	; 8
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				break;
 470:	08 95       	ret
				
				case 3:
				gpioPinWrite(SEG_BCD_GPIO,BIT0,HIGH);
 472:	4f ef       	ldi	r20, 0xFF	; 255
 474:	61 e0       	ldi	r22, 0x01	; 1
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT1,HIGH);
 47c:	4f ef       	ldi	r20, 0xFF	; 255
 47e:	62 e0       	ldi	r22, 0x02	; 2
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT2,LOW);
 486:	40 e0       	ldi	r20, 0x00	; 0
 488:	64 e0       	ldi	r22, 0x04	; 4
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT3,LOW);
 490:	40 e0       	ldi	r20, 0x00	; 0
 492:	68 e0       	ldi	r22, 0x08	; 8
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				break;
 49a:	08 95       	ret
				case 4:
				gpioPinWrite(SEG_BCD_GPIO,BIT0,LOW);
 49c:	40 e0       	ldi	r20, 0x00	; 0
 49e:	61 e0       	ldi	r22, 0x01	; 1
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT1,LOW);
 4a6:	40 e0       	ldi	r20, 0x00	; 0
 4a8:	62 e0       	ldi	r22, 0x02	; 2
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT2,HIGH);
 4b0:	4f ef       	ldi	r20, 0xFF	; 255
 4b2:	64 e0       	ldi	r22, 0x04	; 4
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT3,LOW);
 4ba:	40 e0       	ldi	r20, 0x00	; 0
 4bc:	68 e0       	ldi	r22, 0x08	; 8
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				break;
 4c4:	08 95       	ret
				case 5:
				gpioPinWrite(SEG_BCD_GPIO,BIT0,HIGH);
 4c6:	4f ef       	ldi	r20, 0xFF	; 255
 4c8:	61 e0       	ldi	r22, 0x01	; 1
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT1,LOW);
 4d0:	40 e0       	ldi	r20, 0x00	; 0
 4d2:	62 e0       	ldi	r22, 0x02	; 2
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT2,HIGH);
 4da:	4f ef       	ldi	r20, 0xFF	; 255
 4dc:	64 e0       	ldi	r22, 0x04	; 4
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT3,LOW);
 4e4:	40 e0       	ldi	r20, 0x00	; 0
 4e6:	68 e0       	ldi	r22, 0x08	; 8
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				break;
 4ee:	08 95       	ret
				case 6:
				gpioPinWrite(SEG_BCD_GPIO,BIT0,LOW);
 4f0:	40 e0       	ldi	r20, 0x00	; 0
 4f2:	61 e0       	ldi	r22, 0x01	; 1
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT1,HIGH);
 4fa:	4f ef       	ldi	r20, 0xFF	; 255
 4fc:	62 e0       	ldi	r22, 0x02	; 2
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT2,HIGH);
 504:	4f ef       	ldi	r20, 0xFF	; 255
 506:	64 e0       	ldi	r22, 0x04	; 4
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT3,LOW);
 50e:	40 e0       	ldi	r20, 0x00	; 0
 510:	68 e0       	ldi	r22, 0x08	; 8
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				break;
 518:	08 95       	ret
				case 7:
				gpioPinWrite(SEG_BCD_GPIO,BIT0,HIGH);
 51a:	4f ef       	ldi	r20, 0xFF	; 255
 51c:	61 e0       	ldi	r22, 0x01	; 1
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT1,HIGH);
 524:	4f ef       	ldi	r20, 0xFF	; 255
 526:	62 e0       	ldi	r22, 0x02	; 2
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT2,HIGH);
 52e:	4f ef       	ldi	r20, 0xFF	; 255
 530:	64 e0       	ldi	r22, 0x04	; 4
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT3,LOW);
 538:	40 e0       	ldi	r20, 0x00	; 0
 53a:	68 e0       	ldi	r22, 0x08	; 8
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				break;
 542:	08 95       	ret
				case 8:
				gpioPinWrite(SEG_BCD_GPIO,BIT0,LOW);
 544:	40 e0       	ldi	r20, 0x00	; 0
 546:	61 e0       	ldi	r22, 0x01	; 1
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT1,LOW);
 54e:	40 e0       	ldi	r20, 0x00	; 0
 550:	62 e0       	ldi	r22, 0x02	; 2
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT2,LOW);
 558:	40 e0       	ldi	r20, 0x00	; 0
 55a:	64 e0       	ldi	r22, 0x04	; 4
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT3,HIGH);
 562:	4f ef       	ldi	r20, 0xFF	; 255
 564:	68 e0       	ldi	r22, 0x08	; 8
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				break;
 56c:	08 95       	ret
				case 9:
				gpioPinWrite(SEG_BCD_GPIO,BIT0,HIGH);
 56e:	4f ef       	ldi	r20, 0xFF	; 255
 570:	61 e0       	ldi	r22, 0x01	; 1
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT1,LOW);
 578:	40 e0       	ldi	r20, 0x00	; 0
 57a:	62 e0       	ldi	r22, 0x02	; 2
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT2,LOW);
 582:	40 e0       	ldi	r20, 0x00	; 0
 584:	64 e0       	ldi	r22, 0x04	; 4
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
				gpioPinWrite(SEG_BCD_GPIO,BIT3,HIGH);
 58c:	4f ef       	ldi	r20, 0xFF	; 255
 58e:	68 e0       	ldi	r22, 0x08	; 8
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
 596:	08 95       	ret

00000598 <sevenSegEnable>:
	}
}

void sevenSegEnable(En_SevenSegId_t en_segment_id)
{
	switch (en_segment_id)
 598:	88 23       	and	r24, r24
 59a:	19 f0       	breq	.+6      	; 0x5a2 <sevenSegEnable+0xa>
 59c:	81 30       	cpi	r24, 0x01	; 1
 59e:	39 f0       	breq	.+14     	; 0x5ae <sevenSegEnable+0x16>
 5a0:	08 95       	ret
	{
		case SEG_0:
		{
			gpioPinWrite(SEG_EN1_GPIO,SEG_EN1_BIT,HIGH);
 5a2:	4f ef       	ldi	r20, 0xFF	; 255
 5a4:	64 e0       	ldi	r22, 0x04	; 4
 5a6:	83 e0       	ldi	r24, 0x03	; 3
 5a8:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
			break;
 5ac:	08 95       	ret
		
		}
		case SEG_1:
		{
			gpioPinWrite(SEG_EN2_GPIO,SEG_EN2_BIT,HIGH);
 5ae:	4f ef       	ldi	r20, 0xFF	; 255
 5b0:	68 e0       	ldi	r22, 0x08	; 8
 5b2:	83 e0       	ldi	r24, 0x03	; 3
 5b4:	0e 94 8a 00 	call	0x114	; 0x114 <gpioPinWrite>
 5b8:	08 95       	ret

000005ba <SwDelay_ms>:
 * Created: 1/18/2020 2:48:30 PM
 *  Author: A_ayman
 */ 
#include "std_types.h"
void SwDelay_ms(uint32_t n)
{
 5ba:	cf 92       	push	r12
 5bc:	df 92       	push	r13
 5be:	ef 92       	push	r14
 5c0:	ff 92       	push	r15
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
 5c6:	00 d0       	rcall	.+0      	; 0x5c8 <SwDelay_ms+0xe>
 5c8:	00 d0       	rcall	.+0      	; 0x5ca <SwDelay_ms+0x10>
 5ca:	cd b7       	in	r28, 0x3d	; 61
 5cc:	de b7       	in	r29, 0x3e	; 62
 5ce:	6b 01       	movw	r12, r22
 5d0:	7c 01       	movw	r14, r24
	/* this function will give you a delay of 1 ms if your frequency is 8 MHZ
		                                   of 2 ms if your frequency is 4 MHZ
	*/
	volatile uint32_t z=0;
 5d2:	19 82       	std	Y+1, r1	; 0x01
 5d4:	1a 82       	std	Y+2, r1	; 0x02
 5d6:	1b 82       	std	Y+3, r1	; 0x03
 5d8:	1c 82       	std	Y+4, r1	; 0x04
    uint16_t j=0;
	uint32_t i=0;
	
	for(i=0; i<n;i++)
 5da:	67 2b       	or	r22, r23
 5dc:	68 2b       	or	r22, r24
 5de:	69 2b       	or	r22, r25
 5e0:	c9 f4       	brne	.+50     	; 0x614 <SwDelay_ms+0x5a>
 5e2:	1e c0       	rjmp	.+60     	; 0x620 <SwDelay_ms+0x66>
	{
		for( j=0; j<350;j++)
		{
			z++;
 5e4:	89 81       	ldd	r24, Y+1	; 0x01
 5e6:	9a 81       	ldd	r25, Y+2	; 0x02
 5e8:	ab 81       	ldd	r26, Y+3	; 0x03
 5ea:	bc 81       	ldd	r27, Y+4	; 0x04
 5ec:	01 96       	adiw	r24, 0x01	; 1
 5ee:	a1 1d       	adc	r26, r1
 5f0:	b1 1d       	adc	r27, r1
 5f2:	89 83       	std	Y+1, r24	; 0x01
 5f4:	9a 83       	std	Y+2, r25	; 0x02
 5f6:	ab 83       	std	Y+3, r26	; 0x03
 5f8:	bc 83       	std	Y+4, r27	; 0x04
 5fa:	21 50       	subi	r18, 0x01	; 1
 5fc:	31 09       	sbc	r19, r1
    uint16_t j=0;
	uint32_t i=0;
	
	for(i=0; i<n;i++)
	{
		for( j=0; j<350;j++)
 5fe:	91 f7       	brne	.-28     	; 0x5e4 <SwDelay_ms+0x2a>
	*/
	volatile uint32_t z=0;
    uint16_t j=0;
	uint32_t i=0;
	
	for(i=0; i<n;i++)
 600:	4f 5f       	subi	r20, 0xFF	; 255
 602:	5f 4f       	sbci	r21, 0xFF	; 255
 604:	6f 4f       	sbci	r22, 0xFF	; 255
 606:	7f 4f       	sbci	r23, 0xFF	; 255
 608:	c4 16       	cp	r12, r20
 60a:	d5 06       	cpc	r13, r21
 60c:	e6 06       	cpc	r14, r22
 60e:	f7 06       	cpc	r15, r23
 610:	21 f4       	brne	.+8      	; 0x61a <SwDelay_ms+0x60>
 612:	06 c0       	rjmp	.+12     	; 0x620 <SwDelay_ms+0x66>
 614:	40 e0       	ldi	r20, 0x00	; 0
 616:	50 e0       	ldi	r21, 0x00	; 0
 618:	ba 01       	movw	r22, r20
 * Created: 1/18/2020 2:48:30 PM
 *  Author: A_ayman
 */ 
#include "std_types.h"
void SwDelay_ms(uint32_t n)
{
 61a:	2e e5       	ldi	r18, 0x5E	; 94
 61c:	31 e0       	ldi	r19, 0x01	; 1
 61e:	e2 cf       	rjmp	.-60     	; 0x5e4 <SwDelay_ms+0x2a>
		for( j=0; j<350;j++)
		{
			z++;
		}	
	}
}
 620:	0f 90       	pop	r0
 622:	0f 90       	pop	r0
 624:	0f 90       	pop	r0
 626:	0f 90       	pop	r0
 628:	df 91       	pop	r29
 62a:	cf 91       	pop	r28
 62c:	ff 90       	pop	r15
 62e:	ef 90       	pop	r14
 630:	df 90       	pop	r13
 632:	cf 90       	pop	r12
 634:	08 95       	ret

00000636 <__tablejump2__>:
 636:	ee 0f       	add	r30, r30
 638:	ff 1f       	adc	r31, r31
 63a:	05 90       	lpm	r0, Z+
 63c:	f4 91       	lpm	r31, Z
 63e:	e0 2d       	mov	r30, r0
 640:	09 94       	ijmp

00000642 <_exit>:
 642:	f8 94       	cli

00000644 <__stop_program>:
 644:	ff cf       	rjmp	.-2      	; 0x644 <__stop_program>
